22.07.01

< 컴포넌트 만들기 >
1. vue 파일 생성
2. template에 축약할 HTML 작성
3. name: 이름 넣어주기

< 컴포넌트 사용 >
1. vue 파일 import
2. components {
      Component : Component,(이름 같으면 Component,축약가능)
}에 등록
3. 사용 <Component />

- 업데이트 관계로 컴포넌트.vue 이름은 2단어 이상으로 작명 해야함 (안 그러면 에러)
  ex)DiscountBanner.vue 

- 싫으면 package.json 파일 열어서 "rules" 라는 항목에 다음을 추가

"rules": {
   "vue/multi-word-component-names": "off"
} 

< props >
자식 컴포넌트가 부모 컴포넌트의 데이터가 필요할 때 props로 전송
( App.vue에 있는 data를 복사해서 사용하면 안됨 )

< props 사용법 >
1. App.vue에 있는 컴포넌트에 v-bind 혹은 :를 사용해서 데이터 전송
   ex) < 자식컴포넌트 :작명="데이터이름" />
   ex) <Modal :onerooms="onerooms" :roomNum="roomNum" :modalOpen="modalOpen" />
2. 자식 컴포넌트는 props를 이용해 data를 받아옴
   ex) props:{
         데이터이름 : 자료형이름
       }
   ex)    
       export default {
          name: 'Modal',
          props : {
            onerooms : Array,
            roomNum : Number,
            modalOpen : Boolean,
           }
         }
         
- props는 read-only, 재할당 불가(재할당하는 문법이 속하면 안됨)
- 자식 컴포넌트의 데이터를 부모 컴포넌트가 사용할 경우 그 데이터를 부모 컴포넌트에 만들어야 함
- props 보낼 때 다양한 자료형 입력 가능 :작명="Array, Object"
- 간단한 문자열을 보낼때는 그냥 작명="문자자료" 가능
- 오브젝트 데이터 각각 전송도 가능 <  :name="object.name" :age="object.age">
                         = <  v-bind="object"> 

< custom event >
App.vue에 있는 데이터를 수정하고 싶다면 custom event를 사용
- < Component @click="modalOpen = true" > 컴포넌트에 직접 이벤트를 주면 작동하지만
  이벤트 버블링 현상으로 HTML요소를 클릭하면 감싸는 상위 요소도 다 클릭한 것으로 작동

- 부모에게 메세지 보낼 때 $emit('작명', 데이터) 
<h4 @click="$emit('openModal', oneroom.id)">
// openModal 부분을 수정해달라고 메세지 보냄, oneroom.id 데이터 전송
- 부모에게 수신할 때 $작명="실행할 것"
- 자식이 보낸 데이터는 $event로 받아옴
<Card @openModal="modalOpen = true; roomNum = $event" />

- 만약 함수로 emit을 사용하고 싶다면
methods : {
  send(){
    this.$emit('openModal', this.oneroom.id)
    }
}

< 이벤트 >
click : click 시 실행
input : 입력할 시 실행
change : 입력하고 커서 다른 곳 찍으면 실행

< 이벤트 리스너 >
- $event 사용
- input 데이터 저장
ex) <input @input="month = $event.target.value">
    <p>{{ month }}개월 가격 : {{onerooms[roomNum].price * month}} 원</p>

- input 데이터 저장2 (축약버전 v-model)
  v-model="데이터이름"
ex) <input v-model="month">

- v-model의 역할 : input 입력한 데이터를 저장해 줌, textarea, select 다 사용가능

< watcher >
- 데이터 감시 
watch : { 
    감시데이터()
    //데이터가 변할때마다 watcher 실행
}

ex)
watch : {
        month(a){  //a는 month
            if( a >= 13 ){
                alert('최대 12개월까지 입력해주세요')
            } else if ( isNaN(a) == true ){ 
            // isNaN 숫자만
                alert('숫자만 입력해 주세요');
                this.month = 1;
            }
        },
    }


// 바형태로 데이터 선택
< input type="range" min="1" max="12" >

< 데이터 검사 라이브러리 >
- form validation 라이브러리 (vue전용)

< 애니메이션 >
- HTML 속성에 데이터 바인딩 하려면 :속성="데이터이름"

- class명을 조건부로 넣기 { 클래스명 : 조건 }
<div class="start" :class="{ end : modalOpen }"></div>

<style>
.start {
  opacity: 0;
  transition: all 1s;
}
.end {
  opacity: 1;
}
</style>

- vue에서는 transition 태그이용
<transition name="fade"></transition>

<style>
.fade-enter-from{ /*시작스타일*/
  opacity: 0;
  /*transform: translateY(-1000px); 위에서 아래로*/
}
.fade-enter-active { /*transition*/
  transition: all 1s;
}
.fade-enter-to { /*끝날때스타일*/
  opacity: 1;
  /*transform: translateY(0px);*/
}
</style>

- 퇴장 시
.fade-leave-from{ /*시작스타일*/
  opacity: 1;
}
.fade-leave-active { /*transition*/
  transition: all 1s;
}
.fade-leave-to { /*끝날때스타일*/
  opacity: 0;
}


< 정렬 >
- array.sort //문자정렬 

- priceSort(){
     this.array.sort(function(a,b){ //숫자정렬
       return a - b
   });
}

- sort() 사용 시 원본 변형
- map() filter() 등은 원본 보존

< 정렬 정리 >
// 숫자
function compare ( a , b ) {   return a - b;   } 
//가나다 순
function ascending ( a , b ) { 
   return ( a < b ) ? -1 : ( a == b ) ? 0 : 1; 
}  
//역순
function descending ( a , b ) { 
   return ( b < a ) ? -1 : ( b == a ) ? 0 : 1; 
} 
// 대소문자 무시 ( toLowerCase ) 
function ascending ( a , b ) {  
   var a = a.toString().toLowerCase();         
   var b = b.toString().toLowerCase();         
   return ( a < b ) ? -1 : ( a == b ) ? 0 : 1; 
}  
   
//역순
function descending ( a , b ) { 
   var a = a.toString().toLowerCase();         
   var b = b.toString().toLowerCase();         
   return ( b < a ) ? -1 : ( b == a ) ? 0 : 1; 
} 

< 컴포넌트의 lifecycle >
Lifecycle : 컴포넌트는 웹페이지에 표시되기까지 일련의 step을 거침
1. create 단계 : 데이터만 존재하는 단계
2. mount 단계 : <template> 사이에 있던 부분을 실제 HTML로 바꿔줌
3. component 생성 : index.html에 장착

그외 
- update 단계 : data가 변하면 HTML이 재랜더링 됨
  ( data가 변하면 실은 <component>가 재랜더링 됨 )
- unmount 단계 : 컴포넌트 삭제

< Hook >
- Lifecycle Hook을 걸어 중간에 원하는 코드를 실행 가능
( beforeCreate(), created(), beforeMount(), mounted(),
beforeUpdate(), updated(), beforeUnmount(), unmounted()... )
- 서버에서 데이터가져올 때도 Lifecycle Hook 안에 코드 작성 ( Ajax 요청 )
( created(), mounted() 

// alert 창 2초 뒤 사라짐
  mounted(){
    setTimeout(()=>{
      this.showDiscount = false;
    }, 2000);
  },

// alert창의 할인률 1초마다 1 감소
  mounted(){
    setInterval(() => {
      this.amount--;
    }, 1000);
  },
// input 2 입력 시 alert 창 경고
  beforeUpdate(){
    if (this.month ==2 ){
      alert('3개월 이상 ')
    }
  },



